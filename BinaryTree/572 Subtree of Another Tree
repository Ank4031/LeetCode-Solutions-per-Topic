# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        def check(r,f):
            if not r and not f:
                return True
            elif not r and f or r and not f:
                return False
            else:
                if r.val == f.val:
                    return check(r.left,f.left) and check(r.right,f.right)
                else:
                    return False
                    
        def dfs(rt):
            if rt:
                if check(rt,subRoot):
                    return True
                else:
                    return dfs(rt.left) or dfs(rt.right)
            else:
                return False
        
        return dfs(root)
