# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        self.res = None 
        self.c = 1
        def dfs(rt):
            if not rt or not self.c:
                return 0
            else:
                if rt.val in {p.val,q.val}:
                    a = dfs(rt.left)
                    if a:
                        self.res = rt
                        self.c = 0
                        return 0 
                    b = dfs(rt.right)
                    if b:
                        self.res = rt
                        self.c = 0
                        return 0 
                    return 1
                else:
                    a = dfs(rt.left)
                    b = dfs(rt.right)
                    if a and b:
                        self.c = 0
                        self.res = rt
                        return 0
                    if a or b:
                        return 1
                    else:
                        return 0

        dfs(root)
        return self.res

        
