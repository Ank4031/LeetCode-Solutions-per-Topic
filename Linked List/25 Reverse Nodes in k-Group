# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        // Sub linked list will be stored in this List
        lis = []
        // get function will generate the sub reverse linked list and will add them to the lis
        def get(tempH,k,head1):
            th = tempH
            while tempH and k!=0:
                newH = ListNode(tempH.val)
                if not head1:
                    head1 = newH
                else:
                    newH.next = head1
                    head1 = newH
                tempH = tempH.next
                k-=1
            if k:
                lis.append(th)
            else:
                lis.append(head1)

        
        i=0
        // pass the sub Linked list to reverse
        while head:
            if i%k == 0:
                newHead = None
                get(head,k,newHead)
            head = head.next 
            i+=1

        // connect all the sub Linked list to generate a complete Linked list 
        for i in range(len(lis)-1):
            x = lis[i]
            while x.next:
                x = x.next
            x.next = lis[i+1]

        // return the head of the linked List
        return lis[0]
        
